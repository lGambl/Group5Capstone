@using StudyWeb.Models
@model StudyWeb.Models.Source
@{
    ViewData["Title"] = "View";
}

<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
</head>

<style>
    #notes {
        background-color: #fff8dc; /* Notebook-like paper color */
        border: 2px solid #d3d3d3; /* Light grey border for the notebook */
        padding: 20px;
        margin: 10px;
        overflow-y: scroll;
        box-shadow: 5px 5px 15px rgba(0,0,0,0.2); /* Adding some shadow for depth */
        font-family: 'Courier New', Courier, monospace; /* Gives a typewritten or handwritten feel */
        max-height: 700px; /* Adjust based on your layout */
        height: 700px; /* Adjust based on your layout */
        display: flex;
        flex-direction: column;
    }

    #notesList {
        overflow-y: auto;
        max-height: 500px; /* Adjust as needed */
    }

    .note {
        background-color: #ffffff; /* White background for each note */
        border-left: 6px solid #ffc107; /* Yellow left border for note */
        margin-bottom: 15px;
        padding: 10px;
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1); /* Slight shadow for the notes */
        word-wrap: break-word;
        overflow-y: scroll;
        max-height: 100px;
        
    }

    /* Optional: Adding some ruled lines to the notebook */
    #notes::before {
        content: '';
        position: absolute;
        left: 30px; /* Adjust based on your layout */
        right: 30px; /* Adjust based on your layout */
        top: 0;
        bottom: 0;
        width: 100%;
        height: 100%;
        background-image: linear-gradient(#f0e9e9 0.5px, transparent 0.5px); /* Light lines for ruled paper */
        background-size: auto 30px; /* Adjust line spacing here */
        z-index: -1;
        opacity: 0.5;
    }

    /* Optional: Adding a 'margin' to the notebook */
    #notes::after {
        content: '';
        position: absolute;
        left: 20px; /* Adjust based on your layout */
        top: 0;
        bottom: 0;
        width: 10px; /* Width of the margin line */
        background-color: #d3d3d3; /* Color of the margin line */
        z-index: -1;
    }

    .submit-note-btn-margin {
        margin: 10px; /* This adds 10px margin on all sides of the button */
    }

    .note-tags {
        font-style: italic;
        color: #666;
    }
</style>

<button onclick="goBack()">Go Back</button>

<h1>@Html.DisplayFor(model => model.Title)</h1>

<div style="display: grid; grid-template-columns: 1fr 1fr; grid-template-rows: 1fr">

    @if (Model.Type == SourceTypes.VideoLink || Model.Type == SourceTypes.PdfLink || Model.Type == SourceTypes.ImageLink)
    {
        <div>
            <iframe width="1000" height="700" src="@Html.DisplayFor(model => model.Link)"></iframe>
        </div>
    }
    else if (Model.Type == SourceTypes.Video)
    {
        <div>
            <video width="1000" height="700" controls>
                <source src="@Url.Content("~/" + Model.Link)" type="video/mp4">
                Your browser does not support the video tag.
            </video>
        </div>
    }
    else if (Model.Type is SourceTypes.Pdf or SourceTypes.Image)
    {
        <div>
            <iframe width="1000" height="700" src="@Url.Content("~/" + Model.Link)"></iframe>
        </div>
    }

    <div id="notes">
        @using (Html.BeginForm("Note", "SourceExplorer", FormMethod.Post, new { id = "noteForm", @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()

            <p style="display:none" id="Id">@Html.DisplayFor(note => note.Id)</p>

            <div class="form-group">
                <label for="noteText" class="control-label">Add Note</label>
                <textarea name="noteText" id="noteText" class="form-control" rows="3" required placeholder="Enter your note here..."></textarea>
            </div>

            <button type="submit" class="btn btn-primary submit-note-btn-margin">Submit Note</button>

            <div class="form-group">
                <label for="noteTagEditor" class="control-label">Add Tags</label>
                <textarea name="noteTags" id="noteTagEditor" class="form-control" rows="2" placeholder="Enter your tag here..."></textarea>
            </div>

            <div id="tags">
                <label for="noteTags">Tags</label>
                <textarea name="noteTags" id="noteTags" class="form-control" disabled rows="3" placeholder="No tags yet."></textarea>
            </div>

            <button type="button" id="addTagNewNote" class="btn btn-primary submit-note-btn-margin">Add Tag</button>

            <div id="notesList">
                @foreach (var note in Model.Notes)
                {
                    <div class="note">
                        <p>@note.Text</p>
                        <div id="tags">
                            <label for="noteTags">Tags</label>
                            <textarea disabled rows="3" placeholder="No tags yet.">@note.Tags.Select(t => t.Name).ToString()</textarea>
                        </div>
                        <button class="delete-note-btn btn-secondary" data-note-id="@note.Id">Delete</button>
                    </div>
                }
            </div>
        }
    </div>

</div>
<script>

    function goBack() {
        window.history.back();
    }

    $(document).ready(function () {
        $('#noteForm').submit(function (e) {
            e.preventDefault(); 

            var sourceId = $("#Id").text();
            var noteText = $('#noteText').val();
            var noteTags = $('#noteTags').val();

            $.ajax({
                url: '/SourceExplorer/Note', 
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    text: noteText,
                    sourceId: sourceId,
                    tags: noteTags
                },
                success: function (response) {
                    location.reload();
                },
                error: function () {
                    alert('There was an error adding your note. Please try again.');
                }
            });
        });
    });

    $(document).on('click', '.delete-note-btn', function () {
        var confirmed = confirm("Are you sure you want to delete this note?");
        if (!confirmed) {
            return;
        }

        var noteId = $(this).data('note-id');
        var noteDiv = $(this).closest('.note');

        $.ajax({
            url: '/SourceExplorer/DeleteNote/' + noteId,
            type: 'DELETE',
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                noteDiv.remove();
            },
            error: function () {
                alert('There was an error deleting the note. Please try again.');
            }
        });
    });

    $(document).on('click', '#addTagNewNote', function () {
        var tagText = $('#noteTagEditor').val();
        var noteTags = $('#noteTags').val();
        var newTag = "<" + tagText + ">";

        $('#noteTags').val(newTag + "," + noteTags);
        $('#noteTagEditor').val('');
    });

    $(document).on('click', '#addTagNote', function () {
        var noteId = $(this).data('note-id');
        var tagText = $('#noteTagEditor').val();

        $.ajax({
            url: '/SourceExplorer/AddTag',
            type: 'POST',
            data: {
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                text: tagText,
                noteId: noteId
            },
            success: function (response) {
                var newTagId = response.tagId;
                
            },
            error: function () {
                alert('There was an error adding your tag. Please try again.');
            }
        });
    });
</script>