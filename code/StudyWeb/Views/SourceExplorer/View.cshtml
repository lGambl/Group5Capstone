@using StudyWeb.Models
@model StudyWeb.Models.Source
@{
    ViewData["Title"] = "View";
}

<head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
</head>

<style>
    html, body{
        margin: 0;
        padding: 0;
        max-width: 100%;
        box-sizing: border-box;
    }

    .container{
        margin-left: 0;
    }

    .content-container {
        display: grid;
        grid-template-columns: 1fr 1fr; /* Two columns */
        height: 69vh;
        width: 90vw; /* Full width of the viewport */
        gap: 10px; /* Optional: Adds space between columns */
    }

    .iframe-container {
        height: 100%; /* Full height */
        width: 100%; /* Full width */
        display: flex;
    }

    iframe {
        height: inherit;
        align-content: center;
        border: none; /* Optional: Removes the border */
    }

    /* Style for the notes section */
    #notes {
        background-color: #fff8dc;
        border: 2px solid #d3d3d3;
        padding: 20px;
        height: 100%;
        box-shadow: 5px 5px 15px rgba(0,0,0,0.2);
        font-family: 'Courier New', Courier, monospace;
        overflow-y: hidden;
    }

    #notesList {
        overflow-y: scroll; /* Adds scrollbar when content overflows */
        padding-right: 15px; /* Optional: for better scrollbar visibility */
        height: 30vh
    }

    .note-actions {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }


    .edit-note-icon {
        position: absolute;
        bottom: 10px; /* Adjust as needed */
        right: 10px; /* Adjust as needed */
        cursor: pointer;
        color: #007bff; /* Bootstrap primary color for consistency */
    }

    .note {
        position: relative;
        background-color: #ffffff;
        border-left: 6px solid #ffc107;
        margin-bottom: 15px;
        padding: 10px;
        padding-bottom: 40px; /* Add padding to avoid overlap by the icon */
        box-shadow: 2px 2px 5px rgba(0,0,0,0.1);
        word-wrap: break-word;
        overflow-y: visible; 
        flex-grow: 1;
    }

    .submit-note-btn-margin {
        margin: 10px; /* This adds 10px margin on all sides of the button */
    }

    .note-tags {
        font-style: italic;
        color: #666;
    }

    ul#noteTags {
        list-style-type: none;
        padding: 0;
    }

    ul#noteTags li{
        margin-bottom: 5px;   
    }

    input[type="checkbox"] {
        margin-right: 10px;
    }

    .tagsLabel{
        margin-top: 5px;
    }
</style>

<button type="button" onclick="goBack()">Go Back</button>

<h1>@Html.DisplayFor(model => model.Title)</h1>

<div class="content-container">
    @switch (Model.Type)
    {
        case SourceTypes.VideoLink:
        case SourceTypes.PdfLink:
        case SourceTypes.ImageLink:
            <div class="iframe-container">
                <iframe width="100%" height="100%" src="@Html.DisplayFor(model => model.Link)"></iframe>
            </div>
            break;
        case SourceTypes.Video:
            <div class="iframe-container" style="align-content:center">
                <video controls style="height:inherit;">
                    <source src="@Url.Content("~/" + Model.Link)" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
            </div>
            break;
        case SourceTypes.Pdf or SourceTypes.Image:
            <div class="iframe-container">
                <iframe width="1000" height="700" src="@Url.Content("~/" + Model.Link)"></iframe>
            </div>
            break;
    }

    <div id="notes">
        @using (Html.BeginForm("Note", "SourceExplorer", FormMethod.Post, new { id = "noteForm", @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()

            <p style="display:none" id="Id">@Html.DisplayFor(note => note.Id)</p>

            <div class="form-group">
                <label for="noteText" class="control-label">Add Note</label>
                <textarea name="noteText" id="noteText" class="form-control" rows="3" placeholder="Enter your note here..."></textarea>
            </div>

            <button type="submit" class="btn btn-primary submit-note-btn-margin">Submit Note</button>

            <div id="tags">
                <label for="noteTags" class="tagsLabel">Tags</label>
                <textarea name="noteTags" id="newNoteTags" class="form-control" disabled rows="3" placeholder="No tags yet."></textarea>
            </div>

            <div class="form-group">
                <label for="noteTagEditor" class="control-label">Add Tags</label>
                <textarea name="noteTags" id="noteTagEditor" class="form-control" rows="2" placeholder="Enter your tag here..."></textarea>
            </div>

            <button type="button" id="addTagNewNote" class="btn btn-primary submit-note-btn-margin">Add Tag</button>
        }

            <div id="notesList">
                @foreach (var note in Model.Notes)
                {
                    <div class="note">
                        <p>@note.Text</p>
                        <button type="button" onclick="openEditNoteModal(@note.Id, '@note.Text')" class="edit-note-btn btn-secondary note-action-btn-@note.Id">Edit</button>
                        <button type="button" class="delete-note-btn btn-secondary note-action-btn-@note.Id" data-note-id="@note.Id">Delete Note</button>
                        <div id="tags">
                            <label for="noteTags">Tags</label>
                            <ul id="noteTags" disabled rows="2" placeholder="No tags yet.">
                                @foreach (var tag in note.Tags)
                                {
                                    <li class="note-tags">
                                        <input type="checkbox", id="@tag.Id"/>@tag.Name
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="note-actions">
                            <div>
                                <button type="button" class="add-tag-btn btn-secondary tag-action-btn-@note.Id" data-note-id="@note.Id">Add Tag</button>
                                <button type="button" class="delete-tag-btn btn-secondary tag-action-btn-@note.Id" data-note-id="@note.Id">Delete Tag(s)</button>
                            </div>
                            <span onclick="toggleNoteActions(@note.Id, event)" class="material-symbols-outlined edit-note-icon">
                                edit_note
                            </span>
                        </div>
                    </div>
                }
            </div>
        
    </div>

</div>

<div class="modal fade" id="editNoteModal" tabindex="-1" role="dialog" aria-labelledby="editNoteModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editNoteModalLabel">Edit Note</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editNoteForm">
                    <input type="hidden" id="editNoteId" name="noteId" value="">
                    <div class="form-group">
                        <label for="newText" class="col-form-label">Note Text:</label>
                        <textarea class="form-control" id="newText" name="newText"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

<script>

    function goBack() {
        window.history.back();
    }

    $(document).ready(function () {
        $('#noteForm').submit(function (e) {
            e.preventDefault(); 

            var sourceId = $("#Id").text();
            var noteText = $('#noteText').val();
            var noteTags = $('#newNoteTags').val();

            $.ajax({
                url: '/SourceExplorer/Note', 
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    text: noteText,
                    sourceId: sourceId,
                    tags: noteTags
                },
                success: function (response) {
                    location.reload();
                },
                error: function () {
                    alert('There was an error adding your note. Please try again.');
                }
            });
        });
    });

    $(document).on('click', '.add-tag-btn', function () {
        var tagText = prompt("Enter text for tag.");
        if (tagText) {
            var noteId = $(this).data('note-id');

            $.ajax({
                url: '/SourceExplorer/AddTag',
                type: 'POST',
                data: {
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val(),
                    tagName: "<"+tagText+">",
                    noteId: noteId
                },
                success: function (response) {
                    var newTagId = response.tagId;
                    location.reload();
                },
                error: function () {
                    alert('There was an error adding your tag. Please try again.');
                }
            });
        }
    });


    $(document).on('click', '.delete-note-btn', function () {
        var confirmed = confirm("Are you sure you want to delete this note?");
        if (!confirmed) {
            return;
        }

        var noteId = $(this).data('note-id');
        var noteDiv = $(this).closest('.note');

        $.ajax({
            url: '/SourceExplorer/DeleteNote/' + noteId,
            type: 'DELETE',
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                noteDiv.remove();
            },
            error: function () {
                alert('There was an error deleting the note. Please try again.');
            }
        });
    });

           $(document).on('click', '.delete-tag-btn', function () {
                var confirmed = confirm("Are you sure you want to delete these tags?");
                if (!confirmed) {
                    return;
                }

                var noteId = $(this).data('note-id');
                var checkboxes = document.querySelectorAll('.note-tags input[type="checkbox"]:checked');

                var tagIds = [];
                checkboxes.forEach(function (checkbox) {
                    tagIds.push(checkbox.id);
                });

                $.ajax({
                    url: '/SourceExplorer/DeleteNoteTags/' + noteId,
                    type: 'DELETE',
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    data: {
                        tagIds: tagIds
                    },
                    success: function (response) {
                        location.reload();
                    },
                    error: function () {
                        alert('There was an error deleting the tags. Please try again.');
                    }
                });
            });

    $(document).on('click', '#addTagNewNote', function () {
        var tagText = $('#noteTagEditor').val();
        var noteTags = $('#newNoteTags').val();
        var newTag = "<" + tagText + ">";

        $('#newNoteTags').val(newTag + "," + noteTags);
        $('#noteTagEditor').val('');
    });

    function openEditNoteModal(noteId, currentText) {
        $('#editNoteId').val(noteId);
        $('#newText').val(currentText);
        $('#editNoteModal').modal('show');
    }

    $('#editNoteForm').submit(function (e) {
        e.preventDefault();
        var noteId = $('#editNoteId').val();
        var newText = $('#newText').val();

        $.ajax({
            url: '/SourceExplorer/EditNote',
            type: 'POST',
            data: { noteId: noteId, newText: newText },
            success: function (response) {
                alert('Note updated successfully.');
                $('#editNoteModal').modal('hide');
                location.reload();
            },
            error: function () {
                alert('Error updating note.');
            }
        });
    });

    $(document).ready(function () {
        $('.close').click(function () {
            $('#editNoteModal').modal('hide');
        });
    });

    $(document).ready(function () {
        // Initially hide all action buttons
        $('.edit-note-btn, .delete-note-btn, .add-tag-btn, .delete-tag-btn').hide();
    });

    function toggleNoteActions(noteId, event) {
        // Stop the event from bubbling up and potentially triggering a form submit
        event.stopPropagation();
        event.preventDefault();

        // Toggle visibility of note action buttons
        $('.note-action-btn-' + noteId).toggle();
        // Toggle visibility of tag action buttons
        $('.tag-action-btn-' + noteId).toggle();
    }


</script>

<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>